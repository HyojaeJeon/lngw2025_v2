
Failed to compile
./src/app/dashboard/marketing/planning-process/[id]/page.js
Error: 
  × the name `editKR` is defined multiple times
     ╭─[/home/runner/workspace/client-nextjs/src/app/dashboard/marketing/planning-process/[id]/page.js:81:1]
  81 │     ],
  82 │   });
  83 │ 
  84 │   const [editKR, setEditKR] = useState({
     ·          ───┬──
     ·             ╰── previous definition of `editKR` here
  85 │     title: "",
  86 │     description: "",
  87 │     type: "number",
  88 │     target: "",
  89 │     current: "",
  90 │     unit: "",
  91 │     checklist: [],
  92 │   });
  93 │   const [editingObjective, setEditingObjective] = useState(null);
  94 │   const [showEditObjectiveModal, setShowEditObjectiveModal] = useState(false);
  95 │   const [objectiveToDelete, setObjectiveToDelete] = useState(null);
  96 │   const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
  97 │   const [collapsedObjectives, setCollapsedObjectives] = useState(new Set());
  98 │ 
  99 │   // 사용자 목록 (담당자 선택용)
 100 │   const availableUsers = [
 101 │     { value: "김마케팅", label: "김마케팅", color: "bg-blue-400" },
 102 │     { value: "이기획", label: "이기획", color: "bg-green-400" },
 103 │     { value: "박전략", label: "박전략", color: "bg-purple-400" },
 104 │     { value: "최브랜드", label: "최브랜드", color: "bg-pink-400" },
 105 │   ];
 106 │ 
 107 │   // 샘플 데이터
 108 │   const samplePlan = {
 109 │     id: 1,
 110 │     title: "2025년 1분기 마케팅 계획",
 111 │     startDate: "2025-01-01",
 112 │     endDate: "2025-03-31",
 113 │     manager: "김마케팅",
 114 │     status: "진행중",
 115 │     description:
 116 │       "새로운 년도를 맞아 브랜드 인지도 향상과 고객 확보를 목표로 하는 종합적인 마케팅 전략",
 117 │     targetPersona: "20-30대 직장인",
 118 │     coreMessage: "일상을 더 스마트하게, 더 편리하게",
 119 │     progress: 65,
 120 │   };
 121 │ 
 122 │   // 목표 및 핵심 결과 샘플 데이터
 123 │   const sampleObjectives = [
 124 │     {
 125 │       id: 1,
 126 │       title: "Z세대 인지도 확보",
 127 │       isActive: true,
 128 │       keyResults: [
 129 │         {
 130 │           id: 1,
 131 │           type: "numeric",
 132 │           description: "틱톡 팔로워 증가",
 133 │           target: "50000",
 134 │           currentValue: 32500,
 135 │           unit: "명",
 136 │         },
 137 │         {
 138 │           id: 2,
 139 │           type: "checklist",
 140 │           description: "브랜드 캠페인 실행",
 141 │           checklist: [
 142 │             { text: "인플루언서 5명과 협업 계약 체결", completed: true },
 143 │             { text: "브랜드 해시태그 캠페인 기획", completed: true },
 144 │             { text: "틱톡 챌린지 콘텐츠 제작", completed: false },
 145 │             { text: "캠페인 성과 분석 리포트 작성", completed: false },
 146 │           ],
 147 │         },
 148 │       ],
 149 │     },
 150 │     {
 151 │       id: 2,
 152 │       title: "온라인 매출 증대",
 153 │       isActive: true,
 154 │       keyResults: [
 155 │         {
 156 │           id: 3,
 157 │           type: "numeric",
 158 │           description: "온라인 매출 증가",
 159 │           target: "30",
 160 │           currentValue: 18,
 161 │           unit: "%",
 162 │         },
 163 │         {
 164 │           id: 4,
 165 │           type: "numeric",
 166 │           description: "전환율 향상",
 167 │           target: "3.5",
 168 │           currentValue: 2.8,
 169 │           unit: "%",
 170 │         },
 171 │       ],
 172 │     },
 173 │   ];
 174 │ 
 175 │   // 컴포넌트 마운트 시 데이터 로드
 176 │   useEffect(() => {
 177 │     const loadPlanData = async () => {
 178 │       try {
 179 │         console.log("Loading plan data for ID:", planId);
 180 │         setLoading(true);
 181 │ 
 182 │         // 실제 API 호출 대신 샘플 데이터 사용
 183 │         setTimeout(() => {
 184 │           setPlan(samplePlan);
 185 │           setCurrentPlan(samplePlan);
 186 │           setEditingPlan(samplePlan);
 187 │           setObjectives(sampleObjectives);
 188 │ 
 189 │           // 모든 핵심 결과를 평면화하여 keyResults 배열에 저장
 190 │           const allKeyResults = sampleObjectives.flatMap(
 191 │             (obj) => obj.keyResults,
 192 │           );
 193 │           setKeyResults(allKeyResults);
 194 │ 
 195 │           setLoading(false);
 196 │         }, 1000);
 197 │       } catch (error) {
 198 │         console.error("Network error:", error);
 199 │         setLoading(false);
 200 │       }
 201 │     };
 202 │ 
 203 │     if (planId) {
 204 │       loadPlanData();
 205 │     }
 206 │   }, [planId]);
 207 │ 
 208 │   // 목표 진행률 계산 함수
 209 │   const calculateObjectiveProgress = (objective) => {
 210 │     if (!objective.keyResults || objective.keyResults.length === 0) return 0;
 211 │ 
 212 │     const totalProgress = objective.keyResults.reduce((sum, kr) => {
 213 │       if (kr.type === "numeric") {
 214 │         const progress = Math.min(
 215 │           (kr.currentValue / parseFloat(kr.target)) * 100,
 216 │           100,
 217 │         );
 218 │         return sum + progress;
 219 │       } else if (kr.type === "checklist") {
 220 │         const completed = kr.checklist.filter((item) => item.completed).length;
 221 │         const total = kr.checklist.length;
 222 │         return sum + (total > 0 ? (completed / total) * 100 : 0);
 223 │       }
 224 │       return sum;
 225 │     }, 0);
 226 │ 
 227 │     return Math.round(totalProgress / objective.keyResults.length);
 228 │   };
 229 │ 
 230 │   // 전체 진행률 계산 함수
 231 │   const calculateOverallProgress = () => {
 232 │     if (!objectives || objectives.length === 0) return 0;
 233 │ 
 234 │     const totalProgress = objectives.reduce((sum, objective) => {
 235 │       const objectiveProgress = calculateObjectiveProgress(objective);
 236 │       return sum + objectiveProgress;
 237 │     }, 0);
 238 │ 
 239 │     return Math.round(totalProgress / objectives.length);
 240 │   };
 241 │ 
 242 │   // 체크리스트 항목 추가
 243 │   const addChecklistItem = (krId) => {
 244 │     const updatedKeyResults = keyResults.map((kr) =>
 245 │       kr.id === krId
 246 │         ? {
 247 │             ...kr,
 248 │             checklist: [
 249 │               ...(kr.checklist || []),
 250 │               { text: "", completed: false },
 251 │             ],
 252 │           }
 253 │         : kr,
 254 │     );
 255 │     setKeyResults(updatedKeyResults);
 256 │ 
 257 │     // 선택된 목표 수정 시에도 업데이트
 258 │     if (selectedObjective) {
 259 │       setSelectedObjective((prev) => ({
 260 │         ...prev,
 261 │         keyResults: updatedKeyResults,
 262 │       }));
 263 │     }
 264 │   };
 265 │ 
 266 │   // 체크리스트 항목 업데이트
 267 │   const updateChecklistItem = (krId, itemIndex, text) => {
 268 │     const updatedKeyResults = keyResults.map((kr) =>
 269 │       kr.id === krId
 270 │         ? {
 271 │             ...kr,
 272 │             checklist: (kr.checklist || []).map((item, index) =>
 273 │               index === itemIndex ? { ...item, text } : item,
 274 │             ),
 275 │           }
 276 │         : kr,
 277 │     );
 278 │     setKeyResults(updatedKeyResults);
 279 │ 
 280 │     // 선택된 목표 수정 시에도 업데이트
 281 │     if (selectedObjective) {
 282 │       setSelectedObjective((prev) => ({
 283 │         ...prev,
 284 │         keyResults: updatedKeyResults,
 285 │       }));
 286 │     }
 287 │   };
 288 │ 
 289 │   // 체크리스트 항목 토글
 290 │   const toggleChecklistItem = (krId, itemIndex) => {
 291 │     setKeyResults(
 292 │       keyResults.map((kr) =>
 293 │         kr.id === krId
 294 │           ? {
 295 │               ...kr,
 296 │               checklist: kr.checklist.map((item, index) =>
 297 │                 index === itemIndex
 298 │                   ? { ...item, completed: !item.completed }
 299 │                   : item,
 300 │               ),
 301 │             }
 302 │           : kr,
 303 │       ),
 304 │     );
 305 │   };
 306 │ 
 307 │   // 체크리스트 항목 삭제
 308 │   const removeChecklistItem = (krId, itemIndex) => {
 309 │     setKeyResults(
 310 │       keyResults.map((kr) =>
 311 │         kr.id === krId
 312 │           ? {
 313 │               ...kr,
 314 │               checklist: kr.checklist.filter((_, index) => index !== itemIndex),
 315 │             }
 316 │           : kr,
 317 │       ),
 318 │     );
 319 │   };
 320 │ 
 321 │   // 새 목표 추가
 322 │   const addNewObjective = () => {
 323 │     if (!newObjective.title.trim()) return;
 324 │ 
 325 │     const newId = objectives.length + 1;
 326 │     const newObj = {
 327 │       id: newId,
 328 │       title: newObjective.title,
 329 │       isActive: true,
 330 │       keyResults: newObjective.keyResults.map((kr, index) => ({
 331 │         id: keyResults.length + index + 1,
 332 │         type: kr.type,
 333 │         description: kr.description,
 334 │         target: kr.target,
 335 │         currentValue: kr.currentValue || 0,
 336 │         unit: kr.unit || "",
 337 │         checklist: kr.checklist || [],
 338 │       })),
 339 │     };
 340 │ 
 341 │     setObjectives([...objectives, newObj]);
 342 │     setKeyResults([...keyResults, ...newObj.keyResults]);
 343 │     setShowNewObjectiveModal(false);
 344 │   };
 345 │ 
 346 │   // 핵심결과 편집 함수
 347 │   const handleEditKeyResult = (objIndex, krIndex) => {
 348 │     const objective = objectives[objIndex];
 349 │     const keyResult = objective.keyResults[krIndex];
 350 │ 
 351 │     setSelectedKR(keyResult);
 352 │     setEditingObjIndex(objIndex);
 353 │     setEditingKRIndex(krIndex);
 354 │     setShowEditKRModal(true);
 355 │   };
 356 │ 
 357 │   // 핵심결과 확장(복제) 함수
 358 │   const handleExpandKeyResult = (objIndex, krIndex) => {
 359 │     const objective = objectives[objIndex];
 360 │     const keyResult = objective.keyResults[krIndex];
 361 │ 
 362 │     const expandedKR = {
 363 │       ...keyResult,
 364 │       id: `kr_${Date.now()}`,
 365 │       title: `${keyResult.title} (복사본)`,
 366 │       progress: 0,
 367 │     };
 368 │ 
 369 │     setObjectives((prev) =>
 370 │       prev.map((obj, i) =>
 371 │         i === objIndex
 372 │           ? { ...obj, keyResults: [...obj.keyResults, expandedKR] }
 373 │           : obj,
 374 │       ),
 375 │     );
 376 │   };
 377 │ 
 378 │   // 핵심결과 삭제 함수
 379 │   const handleDeleteKeyResult = (objIndex, krIndex) => {
 380 │     if (window.confirm("이 핵심결과를 삭제하시겠습니까?")) {
 381 │       setObjectives((prev) =>
 382 │         prev.map((obj, i) =>
 383 │           i === objIndex
 384 │             ? {
 385 │                 ...obj,
 386 │                 keyResults: obj.keyResults.filter((_, ki) => ki !== krIndex),
 387 │               }
 388 │             : obj,
 389 │         ),
 390 │       );
 391 │     }
 392 │   };
 393 │ 
 394 │   const editKR = useCallback((id, updates) => {
     ·         ───┬──
     ·            ╰── `editKR` redefined here
 395 │     setKeyResults((prev) =>
 396 │       prev.map((kr) => (kr.id === id ? { ...kr, ...updates } : kr)),
 397 │     );
     ╰────
This error occurred during the build process and can only be dismissed by fixing the error.