## **3. 게시(Posting) 모니터링 섹션**

이 섹션은 콘텐츠가 실제로 소셜 미디어 플랫폼에 게시되는 과정과 결과를 추적하고 관리하는 데 중점을 둡니다. 플랫폼별 성공/실패 현황을 모니터링하고, 실시간 로그를 확인하며, 예약된 게시 일정을 관리합니다.

### **1. 플랫폼별 게시 현황(Platform Posting Status)**

- **기능 정의 및 목적**: 각 소셜 미디어 플랫폼으로의 콘텐츠 게시 성공률과 실패율을 빠르게 파악하고, 문제가 발생한 플랫폼을 즉시 식별하여 대응할 수 있도록 지원합니다.
- **세부 사양 및 동작 방식**:
    - 지원하는 각 플랫폼(Facebook, TikTok, Instagram, Threads, Twitter 등)별로 개별 카드를 생성하여 표시합니다.
    - 각 카드에는 오늘 하루 동안 해당 플랫폼으로 시도된 총 게시 건수, 성공 건수, 실패 건수를 집계하여 표시합니다.
    - 실패율은 (실패 건수 / 총 게시 시도 건수) * 100으로 계산하여 퍼센트(%)로 표시합니다.
    - 실패가 발생한 경우, 마지막으로 발생한 오류 메시지의 핵심 내용을 요약하여 카드에 표시합니다.
    - 각 카드는 클릭 가능하며, 클릭 시 해당 플랫폼으로 게시된 최근 N건 (예: 5건)의 상세 게시 내역을 보여주는 팝업/모달을 띄웁니다. 상세 내역에는 각 게시 시도의 ID, 사용된 콘텐츠 ID, 최종 상태(성공/실패), 실제 게시 완료 시간 또는 실패 시간, 발생한 에러 메시지 전체 내용(실패 시) 등이 포함됩니다.
- **사용자 인터페이스(UI) 요소**:
    - **플랫폼 카드**: 각 플랫폼을 대표하는 카드 형태 컴포넌트. 플랫폼 로고, 오늘 게시 통계 (총, 성공, 실패, 실패율), 마지막 오류 요약 텍스트 필드를 포함합니다. 실패율이 높거나 오류 발생 시 카드 테두리 색상 또는 아이콘으로 경고를 표시할 수 있습니다.
    - **상세 내역 팝업/모달**: 카드 클릭 시 나타나는 오버레이 창. 최근 게시 내역을 보여주는 작은 **테이블** 또는 **리스트** 형태로 구성됩니다.
- **사용자 상호작용(UX)**:
    - 사용자는 플랫폼 카드를 훑어보며 전반적인 게시 상태를 파악합니다.
    - 실패율이 높거나 오류 메시지가 있는 플랫폼 카드를 집중적으로 확인합니다.
    - 특정 플랫폼 카드를 **클릭**하여 최근 게시된 콘텐츠들의 상세 결과를 확인합니다.
- **데이터 요구사항**:
    - 게시 서비스(Posting Service)의 게시 시도 로그 데이터가 필요합니다. 각 로그 항목은 플랫폼, 시도 시간, 결과 상태(성공/실패), 콘텐츠 ID, 에러 코드 및 메시지 등을 포함해야 합니다.
    - 데이터는 일별로 집계되며, 실시간에 가깝게 업데이트되어야 합니다.
- **기술적 고려사항/제약조건**:
    - 게시 로그는 대량으로 쌓일 수 있으므로, 로그 저장 및 집계를 위한 **확장성 있는 데이터베이스** 또는 로그 분석 시스템이 필요합니다.
    - **실시간 업데이트**: 게시 결과가 발생하자마자 빠르게 반영되어야 하므로, 로그 수집 및 집계 파이프라인의 효율성이 중요합니다.
    - **플랫폼 API 에러 메시지 처리**: 각 플랫폼 API에서 반환되는 다양한 에러 메시지를 표준화하고 사용자에게 의미 있는 형태로 요약하여 보여주는 로직이 필요합니다.
- **예외 처리 및 오류 시나리오**:
    - 게시 로그 시스템 자체에 오류 발생 시 카드에 '데이터 로드 실패' 또는 'N/A'로 표시됩니다.
    - 상세 내역 팝업에서 데이터 로딩 실패 시 오류 메시지를 표시합니다.

### **2. 실시간 로그 실시간 업데이트(Live Logs)**

- **기능 정의 및 목적**: 시스템의 백그라운드에서 발생하는 다양한 활동(AI 호출, API 통신, 워크플로우 처리 등)에 대한 상세 로그를 실시간 스트리밍 형태로 제공하여, 문제 발생 시 개발자 또는 운영자가 즉각적으로 원인을 파악하고 디버깅할 수 있도록 지원합니다.
- **세부 사양 및 동작 방식**:
    - 백엔드 시스템의 로그 스트림을 받아와 화면에 콘솔 형태로 출력합니다.
    - 로그 항목에는 최소한 타임스탬프, 로그 레벨(INFO, WARN, ERROR, DEBUG 등), 출처(컴포넌트, 워커 ID 등), 메시지 내용이 포함되어야 합니다.
    - 가장 최신 로그가 하단에 추가되며, 자동으로 스크롤되어 최신 내용을 보여줍니다 (자동 스크롤 On/Off 기능 포함).
    - 로그 레벨, 출처(플랫폼, 워커 ID 등) 기준으로 로그를 필터링할 수 있는 컨트롤이 제공됩니다. 여러 필터를 조합하여 적용 가능합니다.
    - 로그 양이 많을 경우 성능을 고려하여 일정 라인 수 이상은 오래된 로그를 자동으로 삭제하거나 페이지네이션/무한 스크롤 로딩을 적용합니다.
- **사용자 인터페이스(UI) 요소**:
    - **로그 표시 영역**: 코드 에디터 또는 터미널과 유사한 외형의 스크롤 가능한 텍스트 영역. 각 로그 라인은 색상 코딩(예: ERROR는 빨간색)될 수 있습니다.
    - **필터 컨트롤**: 로그 표시 영역 상단 또는 측면에 드롭다운 또는 체크박스 그룹 형태로 제공됩니다.
    - **자동 스크롤 토글**: On/Off 버튼.
- **사용자 상호작용(UX)**:
    - 사용자는 실시간으로 시스템 활동 로그를 확인합니다.
    - 원하는 조건으로 **필터를 적용**하여 특정 유형의 로그(예: 에러 로그만)를 확인합니다.
    - 스크롤하여 과거 로그를 확인하고, 필요 시 자동 스크롤을 **끄고** 로그 내용을 분석합니다.
- **데이터 요구사항**:
    - 시스템 백엔드 컴포넌트(API 게이트웨이, 워크플로우 엔진, AI 서비스 어댑터, 플랫폼 커넥터, 데이터 처리 워커 등)에서 생성되는 구조화된 로그 데이터 스트림.
    - 로그 수집 및 중앙 집중화를 위한 로깅 시스템(예: ELK Stack, Grafana Loki 등) 연동이 필요할 수 있습니다.
- **기술적 고려사항/제약조건**:
    - **실시간 스트리밍**: WebSocket 또는 다른 스트리밍 기술을 사용하여 백엔드 로그를 프런트엔드로 효율적으로 전송해야 합니다.
    - **성능**: 대량의 로그 데이터가 실시간으로 전송될 때 프런트엔드 및 백엔드 모두의 성능 부하를 관리해야 합니다. 클라이언트 측에서의 효율적인 렌더링 및 메모리 관리가 중요합니다.
    - **보안**: 민감한 정보가 로그에 포함되지 않도록 로깅 정책 수립 및 마스킹 처리가 필요합니다.
- **예외 처리 및 오류 시나리오**:
    - 로그 스트림 연결이 끊어질 경우 사용자에게 '로그 스트림 연결 끊김' 메시지를 표시합니다.
    - 필터링 로직에 오류 발생 시 필터가 적용되지 않거나 오류 메시지가 표시될 수 있습니다.

### **3. 예약 게시 관리(Scheduled Posts)**

- **기능 정의 및 목적**: 사용자가 특정 시간에 자동으로 게시되도록 예약한 모든 콘텐츠 목록을 확인하고, 예약 내용을 수정하거나 취소할 수 있도록 하는 기능입니다. (섹션 2.2의 예약 게시 대기 목록보다 상세 관리 기능에 집중)
- **세부 사양 및 동작 방식**:
    - 시스템 내 예약된 모든 게시 건 목록을 테이블 형태로 표시합니다.
    - 테이블 컬럼에는 콘텐츠 ID, 예약된 게시 일시, 대상 소셜 미디어 플랫폼, 해당 게시의 자동/수동 모드 여부, 예약 시점 또는 현재의 승인 상태, 그리고 예약 자체의 활성 상태(Active/Paused/Completed/Cancelled/Failed 등)를 포함합니다.
    - 각 행에는 '예약 편집' 및 '예약 취소' 액션 버튼을 제공합니다.
    - '예약 편집' 클릭 시, 해당 예약 건의 예약 일시를 변경할 수 있는 팝업 또는 모달이 나타납니다. 여기서 새로운 날짜와 시간을 설정하고 저장할 수 있습니다. 다른 예약 정보(플랫폼, 콘텐츠 등)는 변경 불가합니다.
    - '예약 취소' 클릭 시, 해당 예약이 취소되며 게시되지 않습니다. 취소 전 사용자에게 확인 메시지를 표시하는 컨펌 팝업을 띄웁니다.
    - 과거 예약 건 (예약 일시가 지난 건)은 별도로 표시되거나, 필터링 옵션을 통해 '완료' 또는 '실패' 상태의 예약만 조회할 수 있도록 제공될 수 있습니다.
- **사용자 인터페이스(UI) 요소**:
    - **데이터 테이블**: 예약된 게시 목록을 표시하는 주요 컴포넌트. 컬럼 헤더 정렬 기능, 검색/필터 기능(콘텐츠 ID, 플랫폼, 상태, 날짜 범위 등)이 추가될 수 있습니다.
    - **버튼**: 각 행에 **'예약 편집'**, **'예약 취소'** 버튼.
    - **예약 편집 모달/팝업**: 날짜/시간 선택기(Date/Time Picker)와 '저장', '취소' 버튼을 포함하는 작은 창.
    - **예약 취소 확인 팝업**: '정말 취소하시겠습니까?'와 같은 메시지 및 '확인', '취소' 버튼을 포함하는 작은 컨펌 창.
- **사용자 상호작용(UX)**:
    - 사용자는 테이블을 통해 예정된 게시 일정을 한 눈에 확인합니다.
    - 테이블 검색/필터 기능을 사용하여 특정 예약 건을 찾습니다.
    - 필요에 따라 **'예약 편집'** 버튼을 클릭하여 게시 시간을 변경합니다.
    - 게시를 원치 않는 경우 **'예약 취소'** 버튼을 클릭하여 예약을 삭제합니다.
- **데이터 요구사항**:
    - 예약 게시 모듈에 저장된 모든 예약 정보: 예약 ID, 콘텐츠 ID, 예약 일시, 대상 플랫폼, 자동/수동 모드 구분, 예약 생성 시점의 콘텐츠 승인 상태 (또는 최신 상태 반영), 예약 상태.
    - 예약 편집 시 유효한 날짜/시간 입력값에 대한 검증 로직이 필요합니다.
- **기술적 고려사항/제약조건**:
    - **예약 관리 시스템 연동**: 백엔드의 스케줄링 시스템과 정확하게 연동되어야 합니다. 예약 편집/취소 요청이 시스템에 즉시 반영되어야 합니다.
    - **시간대(Timezone) 처리**: 사용자의 시간대와 서버의 시간대, 그리고 예약되는 플랫폼/타겟의 시간대를 고려하여 정확한 시간에 게시되도록 하는 로직이 필수적입니다. 베트남 사용자 고려 시 베트남 표준시(ICT) 처리가 중요합니다.
    - **데이터 일관성**: 예약 정보가 콘텐츠의 상태 변화(예: 승인 -> 거절)에 따라 자동으로 업데이트되거나 사용자에게 알림을 제공하는 메커니즘을 고려할 수 있습니다.
- **예외 처리 및 오류 시나리오**:
    - 예약 편집 시 유효하지 않은 날짜/시간 입력 시 사용자에게 오류 메시지를 표시합니다.
    - 예약 편집/취소 요청 중 서버 오류 발생 시 사용자에게 실패 메시지를 표시하고, 변경 사항이 저장되지 않았음을 알립니다.
    - 이미 게시가 진행 중이거나 완료/실패한 예약 건에 대해 편집/취소 시도 시, 상태 변경이 불가함을 사용자에게 알립니다.