1.1. 전사적 규칙 및 표준
일관성 있는 개발을 위해 다음과 같은 전사적 규칙과 표준을 정의하고 준수합니다.

API 작명 규칙 (API Naming Conventions):

GraphQL 쿼리(Query)에서 목록 조회는 복수형(e.g., customers)을 사용하고, 단일 항목 조회는 단수형(e.g., customer)을 사용합니다.

GraphQL 뮤테이션(Mutation)은 동사+명사 (verbNoun) 패턴(e.g., createCustomer, updateProduct)을 따릅니다.

표준화된 API 응답 (Standardized API Responses):

목록을 반환하는 모든 쿼리는 페이지네이션(Pagination)을 지원하기 위해 Paginated<Type> 형태의 래퍼(wrapper) 객체를 사용합니다. 이 객체는 실제 데이터 목록인 nodes, 전체 항목 수를 나타내는 totalCount, 그리고 다음 페이지 존재 여부를 나타내는 hasNextPage 필드를 필수로 포함합니다.

전역 오류 처리 (Global Error Handling):

모든 API 요청 실패 시, GraphQL은 표준화된 오류 구조를 반환합니다. 이 구조는 오류 메시지를 담는 message, 사전에 정의된 오류 코드를 담는 code(e.g., NOT_FOUND, UNAUTHENTICATED, VALIDATION_FAILED), 그리고 오류가 발생한 경로를 나타내는 path 필드를 포함하여 클라이언트가 오류를 명확하게 처리할 수 있도록 지원합니다.

데이터 타입 표준 (Data Types):

모든 테이블의 기본 키(Primary Key)는 추측 가능한 순차적 숫자 대신 UUID 타입을 사용하여 보안성을 강화합니다.

모든 날짜 및 시간 관련 필드는 타임존 정보를 포함하는 TIMESTAMPTZ 타입을 사용하여 글로벌 서비스 환경에서의 시간 불일치 문제를 원천적으로 방지합니다.

1.2. 핵심 개체-관계 다이어그램 (ERD) - 상위 레벨
시스템의 복잡한 데이터 관계를 직관적으로 이해하기 위해, 핵심 개체(Entity) 간의 관계를 시각화한 상위 레벨 ERD를 정의합니다. 이는 각 모듈을 독립적으로 설계할 때 발생할 수 있는 데이터 단절을 방지하고, 시스템 전체의 데이터 흐름과 무결성을 보장하는 데 필수적입니다.
예를 들어, 하나의 '영업 기회(SalesOpportunity)'는 특정 '고객(Customer)'과 연결되고, 여러 '직원(Employee)'에게 할당될 수 있으며, 판매된 '제품(Product)' 정보를 포함합니다. 이 영업 기회가 성공적으로 종결되면 '매출(Revenue)' 데이터에 영향을 미칩니다. 이러한 복합적인 관계를 사전에 시각화하고 설계함으로써, "A 등급 고객에게 B 제품을 판매하여 발생한 C 직원의 총 매출액은 얼마인가?"와 같은 복잡한 비즈니스 질의를 효율적으로 처리할 수 있는 데이터 구조를 확보하게 됩니다.

코드 스니펫

erDiagram
    USERS |
|--|{ EMPLOYEES : "has"
    USERS |
|--|{ ACTIVITIES : "performs"
    ROLES |
|--|{ USERS : "assigned to"

    CUSTOMERS |
|--|{ SALES_RECORDS : "buys from"
    CUSTOMERS |
|--|{ SALES_OPPORTUNITIES : "has"
    CUSTOMERS |
|--|{ QUOTES : "receives"
    CUSTOMER_GRADES |
|--|{ CUSTOMERS : "classifies"

    EMPLOYEES |
|--|{ SALES_RECORDS : "sells"
    EMPLOYEES |
|--|{ SALES_OPPORTUNTIES : "manages"
    EMPLOYEES |
|--o{ EMPLOYEES : "manages (manager)"

    SALES_RECORDS }|--|
| PAYMENTS : "has"
    SALES_RECORDS }|--|
| INCENTIVE_PAYOUTS : "has"
    SALES_RECORDS }|--|
| SALES_RECORD_HISTORY : "has"
    SALES_CATEGORIES |
|--|{ SALES_RECORDS : "classifies"

    SALES_OPPORTUNITIES |
|--|{ QUOTES : "generates"
    SALES_OPPORTUNITIES |
|--o{ REVENUE_RECORDS : "results in"
    SALES_STAGES |
|--|{ SALES_OPPORTUNITIES : "categorizes"

    PRODUCTS |
|--|{ PRODUCT_MODELS : "has"
    PRODUCT_MODELS |
|--|{ SALES_RECORDS : "is sold in"
    PRODUCT_MODELS |
|--|{ QUOTE_LINE_ITEMS : "is in"
    CATEGORIES |
|--|{ PRODUCTS : "categorizes"

    MARKETING_PLANS |
|--|{ MARKETING_OBJECTIVES : "has"
    MARKETING_OBJECTIVES |
|--|{ MARKETING_KEY_RESULTS : "has"
    MARKETING_KEY_RESULTS |
|--|{ MARKETING_TASKS : "requires"

    JOURNAL_VOUCHERS |
|--|{ VOUCHER_LINES : "consists of"
    CHART_OF_ACCOUNTS |
|--|{ VOUCHER_LINES : "posts to"

    ACTIVITIES }|..|{ CUSTOMERS : "relates to"
    ACTIVITIES }|..|{ SALES_OPPORTUNITIES : "relates to"
1.3. 인증 및 인가 프레임워크 (RBAC)
시스템의 보안을 위해 JWT(JSON Web Token) 기반의 인증과 역할 기반 접근 제어(Role-Based Access Control, RBAC)를 결합한 프레임워크를 도입합니다.

기능 명세: 사용자가 로그인에 성공하면, 서버는 JWT를 발급합니다. 클라이언트는 이후 모든 API 요청의 Authorization 헤더에 이 토큰을 포함하여 전송해야 합니다. 서버는 각 요청에 대해 토큰의 유효성을 검증하고, 토큰에 명시된 사용자의 역할(Role)을 기반으로 특정 쿼리나 뮤테이션에 대한 접근 권한을 제어합니다.

Employee와 User 모델의 분리: 시스템 설계에서 '직원(Employee)'과 '사용자(User)'를 구분하는 것은 보안과 유연성 측면에서 매우 중요합니다.

직원 관리와 접근 제어 메뉴는 서로 다른 데이터 관심사를 가집니다. 직원 모델은 급여, 근태와 같은 민감한 인사(HR) 정보를 다루며, 이는 HR 관리자나 해당 직원의 상급자 등 극히 제한된 역할에만 노출되어야 합니다.

반면, 사용자 모델은 시스템 로그인을 위한 이메일, 비밀번호 해시, 역할 등 인증 및 인가에 필요한 정보를 다룹니다. 이 정보는 모든 로그인된 사용자의 요청 처리 시 시스템 백엔드에서 접근해야 합니다.

이 두 가지 성격의 데이터를 단일 테이블로 관리할 경우, 시스템의 모든 인증 로직이 불필요하게 민감한 HR 정보에 접근할 수 있는 경로를 열어주게 되어 '최소 권한의 원칙'을 위배합니다.

따라서, 인증을 위한 users 테이블과 인사 정보를 위한 employees 프로필 테이블을 분리하고, 이 둘을 user_id로 1:1 연결하는 것이 최적의 아키텍처입니다. 이 설계는 시스템 접근 관리와 인사 정보 관리를 명확히 분리하여 보안 수준을 높이고 시스템의 유지보수성을 향상시킵니다.

핵심 데이터베이스 테이블:

Table: users
| Column | Type | Constraints | Notes |
| :--- | :--- | :--- | :--- |
| id | UUID | PRIMARY KEY | 사용자 고유 식별자 |
| email | VARCHAR(255) | UNIQUE, NOT NULL | 로그인 ID |
| password_hash | VARCHAR(255) | NOT NULL | 해시된 비밀번호 |
| role_id | UUID | FK to roles.id | 사용자의 역할을 지정 |
| is_active | BOOLEAN | NOT NULL, DEFAULT true | 계정 활성 상태 |
| created_at | TIMESTAMPTZ | NOT NULL | |
| updated_at | TIMESTAMPTZ | NOT NULL | |

Table: roles
| Column | Type | Constraints | Notes |
| :--- | :--- | :--- | :--- |
| id | UUID | PRIMARY KEY | 역할 고유 식별자 |
| name | VARCHAR(50) | UNIQUE, NOT NULL | 역할 이름 (e.g., 'Admin', 'Sales Manager') |
| description | TEXT | | 역할에 대한 설명 |

Table: permissions
| Column | Type | Constraints | Notes |
| :--- | :--- | :--- | :--- |
| id | UUID | PRIMARY KEY | 권한 고유 식별자 |
| action | VARCHAR(50) | NOT NULL | 수행할 수 있는 동작 (e.g., 'read', 'create') |
| resource | VARCHAR(50) | NOT NULL | 동작의 대상 (e.g., 'customer', 'product') |
| description | TEXT | | 권한에 대한 설명 |

Table: role_permissions (Join Table)
| Column | Type | Constraints | Notes |
| :--- | :--- | :--- | :--- |
| role_id | UUID | PK, FK to roles.id | |
| permission_id | UUID | PK, FK to permissions.id | |

1.4. 기반 폴리모픽 모델 (Polymorphic Models)
시스템의 여러 모듈에서 반복적으로 나타나는 '활동 내역', '히스토리', '카테고리/태그'와 같은 기능을 효율적으로 구현하기 위해 폴리모픽(Polymorphic) 데이터 모델을 도입합니다. 이는 각 모듈별로 유사한 테이블(customer_activities, sales_activities, product_categories, content_tags 등)을 중복해서 생성하는 대신, 하나의 범용적인 테이블로 여러 종류의 데이터를 처리하는 강력한 아키텍처 패턴입니다.

배경: 고객 상담 및 활동 내역, 영업 활동, 내부 소통 등은 모두 특정 대상에 대한 시간 순서에 따른 이벤트 스트림이라는 공통점을 가집니다. 제품 카테고리와 마케팅 콘텐츠 태그는 계층 구조를 가질 수 있는 분류 체계라는 공통점이 있습니다.

문제점: 이를 개별적으로 구현하면 activity UI 컴포넌트, category 관리 로직, 관련 API 및 데이터베이스 로직이 모듈마다 중복되어 개발 및 유지보수 비용이 급증합니다. 또한, "특정 마케팅 캠페인과 관련된 모든 고객 활동 및 영업 활동"과 같은 모듈 간 통합 분석이 거의 불가능해집니다.

해결책: 폴리모픽 설계를 통해 이 문제를 해결합니다.

단일 activities 테이블은 relatable_id (관련 레코드의 ID)와 relatable_type (관련 레코드의 모델명, e.g., 'Customer', 'SalesOpportunity') 두 개의 컬럼을 사용하여 어떤 모델과도 관계를 맺을 수 있습니다.

마찬가지로, 단일 categories 테이블은 parent_id (계층 구조용)와 폴리모픽 관계를 위한 컬럼을 통해 제품 카테고리, 콘텐츠 태그 등 다양한 분류 체계를 한 곳에서 관리할 수 있습니다.

기대효과: 이 접근 방식은 코드 재사용성을 극대화하고, 시스템의 확장성을 크게 향상시키며, 모든 데이터를 유기적으로 연결하여 고차원적인 데이터 분석의 기반을 마련합니다. 이는 격리된 기능들의 집합을 진정한 통합 데이터 생태계로 전환하는 핵심적인 설계 결정입니다.

핵심 데이터베이스 테이블:

Table: activities
| Column | Type | Constraints | Notes |
| :--- | :--- | :--- | :--- |
| id | UUID | PRIMARY KEY | 활동 고유 식별자 |
| user_id | UUID | FK to users.id | 활동을 수행한 사용자 |
| activity_type | VARCHAR(50) | NOT NULL | 활동 유형 (e.g., 'NOTE', 'CALL', 'EMAIL') |
| content | TEXT | | 활동 상세 내용 |
| relatable_id | UUID | NOT NULL | 관련 레코드의 ID (e.g., 고객 ID, 영업기회 ID) |
| relatable_type | VARCHAR(50) | NOT NULL | 관련 레코드의 모델명 (e.g., 'Customer') |
| created_at | TIMESTAMPTZ | NOT NULL, DEFAULT now() | 활동 생성 시각 |

Table: categories
| Column | Type | Constraints | Notes |
| :--- | :--- | :--- | :--- |
| id | UUID | PRIMARY KEY | 카테고리 고유 식별자 |
| name | VARCHAR(255) | NOT NULL | 카테고리/태그 이름 |
| parent_id | UUID | FK to categories.id | 부모 카테고리 ID (계층 구조용, 최상위는 NULL) |
| type | VARCHAR(50) | NOT NULL | 카테고리 타입 네임스페이스 (e.g., 'PRODUCT', 'CONTENT_TAG') |
| created_at | TIMESTAMPTZ | NOT NULL, DEFAULT now() | |
| updated_at | TIMESTAMPTZ | NOT NULL, DEFAULT now() | |

Part 2: 모듈별 기술 명세
이 섹션에서는 lngw2025_v2 프로젝트의 각 메뉴 항목에 대한 상세 기술 명세를 제공합니다. 각 하위 섹션은 기능 명세, 개발 체크리스트, GraphQL API 정의, 그리고 데이터베이스 스키마로 구성됩니다.

2.1. 대시보드 (메인 - /dashboard)
상세기능: 애플리케이션의 메인 랜딩 페이지로, 여러 모듈의 핵심 지표(KPI)를 위젯 형태로 요약하여 제공합니다. 사용자는 이를 통해 비즈니스 현황을 한눈에 파악할 수 있으며, 향후 위젯의 종류나 배치를 커스터마이징하는 기능을 지원할 수 있습니다.

작업 리스트/체크리스트:

[ ] FE: 위젯 배치를 위한 그리드 기반 레이아웃 시스템 구현 (e.g., react-grid-layout).

[ ] FE: 개별 위젯 컴포넌트 개발 (월간 매출, 신규 고객 수, 영업 파이프라인 요약 등).

[ ] BE: 여러 데이터 소스로부터 데이터를 효율적으로 집계하여 한 번의 요청으로 전달하는 dashboardSummary GraphQL 쿼리 개발.

[ ] BE: 각 위젯에 필요한 데이터를 집계하는 리졸버(Resolver) 로직 최적화.

GraphQL API 명세:

GraphQL

# 대시보드 요약 데이터를 위한 입력 타입
input DateRangeInput {
  start: ISO8601DateTime!
  end: ISO8601DateTime!
}

# 각 모듈별 요약 데이터 타입 정의
type RevenueSummary {
  total: Float!
  changePercentage: Float! # 이전 기간 대비 변화율
  chartData:!
}

type CustomerSummary {
  newCustomers: Int!
  totalCustomers: Int!
}

type SalesSummary {
  pipelineValue: Float!
  opportunitiesWon: Int!
}

type ActivitySummary {
  totalActivities: Int!
  activitiesByType: [KeyValueCount!]!
}

# 대시보드 전체 데이터 구조
type DashboardSummary {
  revenue: RevenueSummary!
  customers: CustomerSummary!
  sales: SalesSummary!
  activity: ActivitySummary!
}

# 최상위 쿼리
type Query {
  """
  대시보드에 필요한 모든 요약 데이터를 집계하여 반환합니다.
  """
  dashboardSummary(dateRange: DateRangeInput): DashboardSummary! @auth
}
데이터베이스 스키마: 이 모듈은 자체적인 테이블을 가지지 않습니다. payments, customers, sales_opportunities, activities 등 다른 모듈의 테이블에서 데이터를 읽어와 집계 및 가공하여 제공합니다.