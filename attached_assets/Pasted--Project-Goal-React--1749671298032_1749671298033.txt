## 프로젝트 목표 (Project Goal)

React로 구현된 '고객 등록' 페이지의 두 가지 주요 버그를 수정하여 정상적으로 동작하도록 만듭니다.

다국어 지원: 하드코딩된 번역 키를 useTranslation 훅을 사용하여 실제 텍스트로 변환합니다.
입력 필드 오류: 사용자가 입력하는 내용이 폼(Form)에 정상적으로 반영되도록 수정합니다.
## 현재 상황 및 문제점 (Current Situation & Problems)

다국어 번역 미적용 (Multilingual Translation Not Applied)

증상: UI에 번역된 텍스트 대신 번역 키(예: customer.add.title, company.name, customer.phone)가 그대로 노출되고 있습니다.
원인: 제공된 useTranslation 훅과 t() 함수가 컴포넌트의 텍스트 라벨, 제목, 플레이스홀더 등에 적용되지 않았습니다.
입력 필드(Input) 동작 오류 (Input Field Malfunction)

증상: 텍스트 입력 필드에 키보드로 타이핑을 해도 아무런 값이 입력되지 않습니다.
원인: React의 제어 컴포넌트(Controlled Component) 방식에서 value 속성이 state와 연결되었으나, 키보드 입력에 따라 state를 업데이트하는 onChange 핸들러가 누락되었거나 잘못 구현되었을 가능성이 매우 높습니다.
## 해결 방안 및 구현 가이드 (Solution & Implementation Guide)

1. 다국어 번역 기능 구현 (Implementing the Translation Function)
컴포넌트 최상단에서 useTranslation 훅을 호출하여 t 함수를 초기화합니다.

JavaScript

import { useTranslation } from "@/hooks/useLanguage.js";

const CustomerAddComponent = () => {
  const { t } = useTranslation();
  // ... (컴포넌트 나머지 로직)
};
컴포넌트 내의 모든 텍스트, 제목, 라벨, 플레이스홀더 등 번역이 필요한 모든 곳의 번역 키를 t() 함수로 감싸줍니다.

제목 수정 예시:

수정 전: <h2>customer.add.title</h2>
수정 후: <h2>{t('customer.add.title')}</h2>
폼 라벨 수정 예시:

수정 전: <label>company.name *</label>
수정 후: <label>{t('company.name')} *</label>
설명 텍스트 수정 예시:

수정 전: <p>customer.add.description</p>
수정 후: <p>{t('customer.add.description')}</p>
2. 입력 필드(Input) 수정 (Fixing the Input Fields)
폼 데이터를 관리할 useState를 선언합니다. 이 state는 각 입력 필드의 값을 객체 형태로 저장합니다.

JavaScript

import React, { useState } from 'react';

// ...
const [formData, setFormData] = useState({
  companyName: '',
  customerPhone: '',
  customerEmail: '',
  industry: '',
  // ... (다른 필드들도 초기화)
});
모든 입력 필드의 onChange 이벤트를 처리할 공통 핸들러 함수를 작성합니다. name 속성을 사용하여 어떤 필드가 변경되었는지 식별하고 해당 state를 업데이트합니다.

JavaScript

const handleInputChange = (e) => {
  const { name, value } = e.target;
  setFormData(prevState => ({
    ...prevState,
    [name]: value
  }));
};
각 <input> 요소에 name, value, onChange 속성을 정확하게 바인딩합니다. name 속성은 useState에 정의된 키와 일치해야 합니다.

수정 전: <input type="text" />
수정 후:
JavaScript

<input
  type="text"
  name="companyName" // 1. `useState`의 키와 일치하는 name 속성 추가
  value={formData.companyName} // 2. state의 값을 value에 바인딩
  onChange={handleInputChange} // 3. onChange 핸들러 연결
/>
전체 적용: 전화번호, 이메일, 업종 등 다른 모든 입력 필드에도 위 3단계를 동일하게 적용하여 제어 컴포넌트로 만들어줍니다. 드롭다운(<select>)의 경우에도 동일한 원칙이 적용됩니다.

## 최종 요청 (Final Request)

위 가이드에 따라, 고객 등록(customer.add) 컴포넌트의 번역 문제를 해결하고 모든 입력 폼이 사용자의 입력에 따라 정상적으로 값을 표시하고 상태를 업데이트하도록 코드를 전면 수정해 주세요.