###############################################
# nginx/nginx.conf
# - HTTP 요청 → HTTPS 리다이렉트
# - /var/www/html/.well-known/acme-challenge/ 처리
# - SSL Termination → app(Next.js/Express)으로 프록시
# - 에러 페이지, gzip, CORS, 보안 헤더, 클라이언트 제한, 정적 캐싱,
#   WebSocket, 리버스 프록시 캐싱, 로깅, SSL/TLS 보안 설정 통합
###############################################

events {
    worker_connections 1024;
}

http {
    # ──────────────────────────────────────────────
    # 전역 설정
    # ──────────────────────────────────────────────

    # 1) 클라이언트 요청 제한 (초당 1 요청)
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    # 2) gzip 압축 설정
    gzip on;
    gzip_types text/plain application/json application/javascript text/css image/svg+xml;
    gzip_min_length 1000;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_disable "msie6";

    # 3) 로그 포맷 및 위치 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 4) 리버스 프록시 캐싱 설정
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # 5) SSL/TLS session 및 보안 설정
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;
    # ssl_dhparam /etc/ssl/certs/dhparam.pem;    # DH 파라미터 파일이 있으면 지정
    ssl_stapling on;
    ssl_stapling_verify on;

    # 6) CORS 및 보안 헤더 설정
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; connect-src 'self' ws:; frame-ancestors 'none';";

    # ──────────────────────────────────────────────
    # 업스트림(Upstream) 정의
    # ──────────────────────────────────────────────

    # 프론트엔드 (Next.js)
    upstream frontend_up {
        server app:3201;
    }

    # 백엔드 (Express/GraphQL)
    upstream backend_up {
        server app:5000;
    }

    # ──────────────────────────────────────────────
    # HTTP → HTTPS 자동 리다이렉트 및 ACME 챌린지
    # ──────────────────────────────────────────────
    server {
        listen 80;
        server_name gw.lnpartners.biz;

        # Certbot/acme.sh HTTP-01 챌린지를 위한 루트
        location /.well-known/acme-challenge/ {
            root /var/www/html;
            # 만약 별도 접근 권한 필요 시 index off;
            try_files $uri =404;
        }

        # 나머지 모든 요청을 HTTPS로 리다이렉트
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # ──────────────────────────────────────────────
    # HTTPS 설정 및 리버스 프록시
    # ──────────────────────────────────────────────
    server {
        listen 443 ssl http2;
        server_name gw.lnpartners.biz;

        # SSL 인증서 경로
        ssl_certificate     /etc/nginx/ssl/gw.lnpartners.biz.cer;
        ssl_certificate_key /etc/nginx/ssl/gw.lnpartners.biz.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # 에러 페이지 설정
        error_page 404 /404.html;
        location = /404.html {
            root /var/www/html;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/www/html;
        }

        # 정적 파일 캐싱 (Next.js 빌드 정적 파일)
        location /_next/static/ {
            alias /app/client-nextjs/.next/static/;
            expires 1y;
            add_header Cache-Control "public";
        }

        # 정적 파일 캐싱 (일반 정적 파일)
        location /static/ {
            alias /var/www/html/static/;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
        }

        # 클라이언트 요청 제한 (레이트 리미트)
        location / {
            limit_req zone=one burst=5 nodelay;
            proxy_pass http://frontend_up;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
        }

        # Express/GraphQL API 요청 처리 (/api/)
        location /api/ {
            proxy_pass http://backend_up;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
        }

        # Express/GraphQL 엔드포인트 처리 (/graphql)
        location /graphql {
            proxy_pass http://backend_up;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
        }

        # WebSocket 지원 (예: /ws)
        location /ws/ {
            proxy_pass http://frontend_up;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
